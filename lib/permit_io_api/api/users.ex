# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PermitIoAPI.Api.Users do
  @moduledoc """
  API calls for all endpoints tagged `Users`.
  """

  alias PermitIoAPI.Connection
  import PermitIoAPI.RequestBuilder


  @doc """
  Assign User Tenants
  Assign a user to one or more tenants in the user's organization.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - user_id (String.t): 
  - tenant_selection (TenantSelection): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.User.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec assign_user_tenants(Tesla.Env.client, String.t, PermitIoAPI.Model.TenantSelection.t, keyword()) :: {:ok, PermitIoAPI.Model.User.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def assign_user_tenants(connection, user_id, tenant_selection, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:post)
    |> url("/v1/users/#{user_id}/tenants")
    |> add_param(:body, :body, tenant_selection)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.User{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Create User
  Create a new User in the Permit system. This user is associated with permissions data.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - new_user (NewUser): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.User.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_user(Tesla.Env.client, PermitIoAPI.Model.NewUser.t, keyword()) :: {:ok, PermitIoAPI.Model.User.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def create_user(connection, new_user, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:post)
    |> url("/v1/users")
    |> add_param(:body, :body, new_user)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %PermitIoAPI.Model.User{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Delete User
  Delete an existing User.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - user_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_user(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def delete_user(connection, user_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/v1/users/#{user_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 404, false},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Get User
  Retrieve user details.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - user_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.User.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_user(Tesla.Env.client, String.t, keyword()) :: {:ok, PermitIoAPI.Model.User.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def get_user(connection, user_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/users/#{user_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.User{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Get User Roles

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - user_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :tenant (String.t): the tenant unique id (uuid)
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.RoleList.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_user_roles(Tesla.Env.client, String.t, keyword()) :: {:ok, PermitIoAPI.Model.RoleList.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def get_user_roles(connection, user_id, opts \\ []) do
    optional_params = %{
      :"tenant" => :query,
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/users/#{user_id}/roles")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.RoleList{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Get User Tenants
  Get a list of tenants the user belongs to (i.e: assigned a role in).

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - user_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.TenantList.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_user_tenants(Tesla.Env.client, String.t, keyword()) :: {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:ok, PermitIoAPI.Model.TenantList.t} | {:error, Tesla.Env.t}
  def get_user_tenants(connection, user_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/users/#{user_id}/tenants")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.TenantList{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  List Users
  Get a list of the users under the active environment or organization. If tenant is provided, the user must have an active role inside that tenant.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :search (String.t): 
    - :skip (integer()): Skip first n results
    - :limit (integer()): Limit to n results
    - :tenant (String.t): the tenant unique id (uuid)
    - :environment (String.t): filter only objects belonging to this environment
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.UserListWithRoles.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_users(Tesla.Env.client, keyword()) :: {:ok, PermitIoAPI.Model.UserListWithRoles.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def list_users(connection, opts \\ []) do
    optional_params = %{
      :"search" => :query,
      :"skip" => :query,
      :"limit" => :query,
      :"tenant" => :query,
      :"environment" => :query,
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.UserListWithRoles{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Remove User Tenants
  Remove a user from one or more tenants in the user's organization.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - user_id (String.t): 
  - tenant_selection (TenantSelection): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.User.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec remove_user_tenants(Tesla.Env.client, String.t, PermitIoAPI.Model.TenantSelection.t, keyword()) :: {:ok, PermitIoAPI.Model.User.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def remove_user_tenants(connection, user_id, tenant_selection, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/v1/users/#{user_id}/tenants")
    |> add_param(:body, :body, tenant_selection)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.User{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Sync User
  Create a user if it does not already exist. Otherwise, update the user data.  NOTE: The roles field is used only when the user is created, and is ignored when updating an existing user. Consider it to be \"initial roles\".

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - new_remote_user (NewRemoteUser): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.User.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec sync_user(Tesla.Env.client, PermitIoAPI.Model.NewRemoteUser.t, keyword()) :: {:ok, PermitIoAPI.Model.User.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def sync_user(connection, new_remote_user, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:put)
    |> url("/v1/users")
    |> add_param(:body, :body, new_remote_user)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.User{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Update User
  Update the user data.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - user_id (String.t): 
  - update_user (UpdateUser): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.User.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_user(Tesla.Env.client, String.t, PermitIoAPI.Model.UpdateUser.t, keyword()) :: {:ok, PermitIoAPI.Model.User.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def update_user(connection, user_id, update_user, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:patch)
    |> url("/v1/users/#{user_id}")
    |> add_param(:body, :body, update_user)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.User{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end
end
