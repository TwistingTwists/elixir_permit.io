# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PermitIoAPI.Api.Roles do
  @moduledoc """
  API calls for all endpoints tagged `Roles`.
  """

  alias PermitIoAPI.Connection
  import PermitIoAPI.RequestBuilder


  @doc """
  Create Role
  Create a new role under the active organization.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - new_role (NewRole): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Role.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_role(Tesla.Env.client, PermitIoAPI.Model.NewRole.t, keyword()) :: {:ok, PermitIoAPI.Model.Role.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def create_role(connection, new_role, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:post)
    |> url("/v1/roles")
    |> add_param(:body, :body, new_role)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %PermitIoAPI.Model.Role{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Delete Role
  Delete an existing role.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - role_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_role(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def delete_role(connection, role_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/v1/roles/#{role_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 404, false},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Get Role
  Retrieve role details.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - role_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Role.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_role(Tesla.Env.client, String.t, keyword()) :: {:ok, PermitIoAPI.Model.Role.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def get_role(connection, role_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/roles/#{role_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.Role{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  List Roles
  Get the list of roles that were configured at either the organization (workspace) level or at the environment level.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :skip (integer()): Skip first n results
    - :limit (integer()): Limit to n results
    - :with_permissions (boolean()): 
    - :tenant (String.t): the tenant unique id (uuid)
    - :environment (String.t): filter only objects belonging to this environment
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.RoleList.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_roles(Tesla.Env.client, keyword()) :: {:ok, PermitIoAPI.Model.RoleList.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def list_roles(connection, opts \\ []) do
    optional_params = %{
      :"skip" => :query,
      :"limit" => :query,
      :"with_permissions" => :query,
      :"tenant" => :query,
      :"environment" => :query,
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/roles")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.RoleList{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Update Role
  Update the role data.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - role_id (String.t): 
  - update_role (UpdateRole): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Role.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_role(Tesla.Env.client, String.t, PermitIoAPI.Model.UpdateRole.t, keyword()) :: {:ok, PermitIoAPI.Model.Role.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def update_role(connection, role_id, update_role, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:patch)
    |> url("/v1/roles/#{role_id}")
    |> add_param(:body, :body, update_role)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.Role{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end
end
