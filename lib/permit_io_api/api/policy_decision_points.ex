# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PermitIoAPI.Api.PolicyDecisionPoints do
  @moduledoc """
  API calls for all endpoints tagged `PolicyDecisionPoints`.
  """

  alias PermitIoAPI.Connection
  import PermitIoAPI.RequestBuilder


  @doc """
  Create Policy Decision Point
  Create a new Policy Decision Point.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - new_pdp (NewPdp): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Pdp.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_pdp(Tesla.Env.client, PermitIoAPI.Model.NewPdp.t, keyword()) :: {:ok, PermitIoAPI.Model.Pdp.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def create_pdp(connection, new_pdp, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:post)
    |> url("/v1/pdps")
    |> add_param(:body, :body, new_pdp)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %PermitIoAPI.Model.Pdp{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Delete Policy Decision Point
  Delete an existing PDP.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - pdp_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_pdp(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def delete_pdp(connection, pdp_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/v1/pdps/#{pdp_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 404, false},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Get Connected PDP Config

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, PermitIoAPI.Model.RemoteConfig.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_current_pdp_config(Tesla.Env.client, keyword()) :: {:ok, PermitIoAPI.Model.RemoteConfig.t} | {:error, Tesla.Env.t}
  def get_current_pdp_config(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v1/pdps/me/config")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.RemoteConfig{}}
    ])
  end

  @doc """
  Get Policy Decision Point
  Retrieve PDP details.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - pdp_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Pdp.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_pdp(Tesla.Env.client, String.t, keyword()) :: {:ok, PermitIoAPI.Model.Pdp.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def get_pdp(connection, pdp_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/pdps/#{pdp_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.Pdp{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Get PDP Config

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - pdp_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.RemoteConfig.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_pdp_config(Tesla.Env.client, String.t, keyword()) :: {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:ok, PermitIoAPI.Model.RemoteConfig.t} | {:error, Tesla.Env.t}
  def get_pdp_config(connection, pdp_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/pdps/#{pdp_id}/config")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.RemoteConfig{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  List Policy Decision Points
  Get a list of PDPs configured under this organization/environment.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :skip (integer()): Skip first n results
    - :limit (integer()): Limit to n results
    - :environment (String.t): filter only objects belonging to this environment
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.PdpList.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_pdps(Tesla.Env.client, keyword()) :: {:ok, PermitIoAPI.Model.PdpList.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def list_pdps(connection, opts \\ []) do
    optional_params = %{
      :"skip" => :query,
      :"limit" => :query,
      :"environment" => :query,
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/pdps")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.PdpList{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Rotate PDP Secret
  Rotate the client secret for this project.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - pdp_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Pdp.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec rotate_pdp_secret(Tesla.Env.client, String.t, keyword()) :: {:ok, PermitIoAPI.Model.Pdp.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def rotate_pdp_secret(connection, pdp_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:post)
    |> url("/v1/pdps/#{pdp_id}/rotate-secret")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.Pdp{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Update Policy Decision Point
  Update the PDP settings.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - pdp_id (String.t): 
  - update_pdp (UpdatePdp): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Pdp.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_pdp(Tesla.Env.client, String.t, PermitIoAPI.Model.UpdatePdp.t, keyword()) :: {:ok, PermitIoAPI.Model.Pdp.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def update_pdp(connection, pdp_id, update_pdp, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:patch)
    |> url("/v1/pdps/#{pdp_id}")
    |> add_param(:body, :body, update_pdp)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.Pdp{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end
end
