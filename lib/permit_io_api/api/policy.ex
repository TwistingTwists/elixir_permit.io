# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PermitIoAPI.Api.Policy do
  @moduledoc """
  API calls for all endpoints tagged `Policy`.
  """

  alias PermitIoAPI.Connection
  import PermitIoAPI.RequestBuilder


  @doc """
  Get Opal Data Sources

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :token (String.t): 
  ## Returns

  {:ok, PermitIoAPI.Model.DataSourceConfig.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_opal_data_sources(Tesla.Env.client, keyword()) :: {:ok, PermitIoAPI.Model.DataSourceConfig.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def get_opal_data_sources(connection, opts \\ []) do
    optional_params = %{
      :"token" => :query
    }
    %{}
    |> method(:get)
    |> url("/opal/data/config")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.DataSourceConfig{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Get Policy
  Retrieves the rego policy for a PDP.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_policy(Tesla.Env.client, keyword()) :: {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def get_policy(connection, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/policy")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Get Policy Config
  Retrieve OPA data for a PDP.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.PolicyConfig.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_policy_config(Tesla.Env.client, keyword()) :: {:ok, PermitIoAPI.Model.PolicyConfig.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def get_policy_config(connection, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/policy-config")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.PolicyConfig{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Get Policy Config Topics
  Retrieve policy data topics to subscribe to in order to get OPA data updates.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, PermitIoAPI.Model.PolicyTopics.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_policy_config_topics(Tesla.Env.client, keyword()) :: {:ok, PermitIoAPI.Model.PolicyTopics.t} | {:error, Tesla.Env.t}
  def get_policy_config_topics(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v1/policy-config/topics")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.PolicyTopics{}}
    ])
  end
end
