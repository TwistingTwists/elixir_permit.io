# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PermitIoAPI.Api.Actions do
  @moduledoc """
  API calls for all endpoints tagged `Actions`.
  """

  alias PermitIoAPI.Connection
  import PermitIoAPI.RequestBuilder


  @doc """
  Create Action
  Add a new action to an existing resource.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - resource_id (String.t): 
  - new_action (NewAction): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Action.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_action(Tesla.Env.client, String.t, PermitIoAPI.Model.NewAction.t, keyword()) :: {:ok, PermitIoAPI.Model.Action.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def create_action(connection, resource_id, new_action, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:post)
    |> url("/v1/resources/#{resource_id}/actions")
    |> add_param(:body, :body, new_action)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %PermitIoAPI.Model.Action{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Delete Action
  Delete an existing action

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - action_id (String.t): 
  - resource_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_action(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def delete_action(connection, action_id, resource_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/v1/resources/#{resource_id}/actions/#{action_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 404, false},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Get Action
  Retrieve action details.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - action_id (String.t): 
  - resource_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Action.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_action(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, PermitIoAPI.Model.Action.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def get_action(connection, action_id, resource_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/resources/#{resource_id}/actions/#{action_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.Action{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  List Actions
  Add a new action to an existing resource.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - resource_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.ActionList.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_actions(Tesla.Env.client, String.t, keyword()) :: {:ok, PermitIoAPI.Model.ActionList.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def list_actions(connection, resource_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/resources/#{resource_id}/actions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.ActionList{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Sync Action
  Create a resource action if it does not already exist.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - resource_id (String.t): 
  - new_action (NewAction): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Action.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec sync_action(Tesla.Env.client, String.t, PermitIoAPI.Model.NewAction.t, keyword()) :: {:ok, PermitIoAPI.Model.Action.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def sync_action(connection, resource_id, new_action, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:put)
    |> url("/v1/resources/#{resource_id}/actions")
    |> add_param(:body, :body, new_action)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.Action{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Update Action
  Update the action data.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - action_id (String.t): 
  - resource_id (String.t): 
  - update_action (UpdateAction): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Action.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_action(Tesla.Env.client, String.t, String.t, PermitIoAPI.Model.UpdateAction.t, keyword()) :: {:ok, PermitIoAPI.Model.Action.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def update_action(connection, action_id, resource_id, update_action, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:patch)
    |> url("/v1/resources/#{resource_id}/actions/#{action_id}")
    |> add_param(:body, :body, update_action)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.Action{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end
end
