# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PermitIoAPI.Api.Tenants do
  @moduledoc """
  API calls for all endpoints tagged `Tenants`.
  """

  alias PermitIoAPI.Connection
  import PermitIoAPI.RequestBuilder


  @doc """
  Create Tenant
  Create a new Tenant under the active organization.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - new_tenant (NewTenant): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Tenant.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_tenant(Tesla.Env.client, PermitIoAPI.Model.NewTenant.t, keyword()) :: {:ok, PermitIoAPI.Model.Tenant.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def create_tenant(connection, new_tenant, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:post)
    |> url("/v1/tenants")
    |> add_param(:body, :body, new_tenant)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %PermitIoAPI.Model.Tenant{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Delete Tenant
  Delete an existing Tenant.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - tenant_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_tenant(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def delete_tenant(connection, tenant_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/v1/tenants/#{tenant_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 404, false},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Get Tenant
  Retrieve Tenant details.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - tenant_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Tenant.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_tenant(Tesla.Env.client, String.t, keyword()) :: {:ok, PermitIoAPI.Model.Tenant.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def get_tenant(connection, tenant_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/tenants/#{tenant_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.Tenant{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  List Tenants

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :skip (integer()): Skip first n results
    - :limit (integer()): Limit to n results
    - :environment (String.t): filter only objects belonging to this environment
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.TenantList.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_tenants(Tesla.Env.client, keyword()) :: {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:ok, PermitIoAPI.Model.TenantList.t} | {:error, Tesla.Env.t}
  def list_tenants(connection, opts \\ []) do
    optional_params = %{
      :"skip" => :query,
      :"limit" => :query,
      :"environment" => :query,
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/tenants")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.TenantList{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Sync Tenant
  Create the Tenant if it doesn't already exist.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - new_remote_tenant (NewRemoteTenant): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Tenant.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec sync_tenant(Tesla.Env.client, PermitIoAPI.Model.NewRemoteTenant.t, keyword()) :: {:ok, PermitIoAPI.Model.Tenant.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def sync_tenant(connection, new_remote_tenant, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:put)
    |> url("/v1/tenants")
    |> add_param(:body, :body, new_remote_tenant)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.Tenant{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Update Tenant
  Update the Tenant data.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - tenant_id (String.t): 
  - update_tenant (UpdateTenant): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Tenant.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_tenant(Tesla.Env.client, String.t, PermitIoAPI.Model.UpdateTenant.t, keyword()) :: {:ok, PermitIoAPI.Model.Tenant.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def update_tenant(connection, tenant_id, update_tenant, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:patch)
    |> url("/v1/tenants/#{tenant_id}")
    |> add_param(:body, :body, update_tenant)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.Tenant{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end
end
