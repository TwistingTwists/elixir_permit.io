# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PermitIoAPI.Api.Resources do
  @moduledoc """
  API calls for all endpoints tagged `Resources`.
  """

  alias PermitIoAPI.Connection
  import PermitIoAPI.RequestBuilder


  @doc """
  Create Resource
  Create a new resource under the active organization/environment.  If resource with the same name already exists, will throw exception. For get-or-create behavior, use sync_resource instead.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - new_resource (NewResource): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Resource.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_resource(Tesla.Env.client, PermitIoAPI.Model.NewResource.t, keyword()) :: {:ok, PermitIoAPI.Model.Resource.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def create_resource(connection, new_resource, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:post)
    |> url("/v1/resources")
    |> add_param(:body, :body, new_resource)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %PermitIoAPI.Model.Resource{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Delete Resource
  Delete an existing resource.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - resource_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def delete_resource(connection, resource_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/v1/resources/#{resource_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 404, false},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Get Resource
  Retrieve resource details.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - resource_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Resource.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, PermitIoAPI.Model.Resource.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def get_resource(connection, resource_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/resources/#{resource_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.Resource{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  List Resources
  Get the list of the resources configured for this organization/environment.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :include_built_ins (boolean()): Whether or not the result should include resources that are automatically created by the system
    - :skip (integer()): Skip first n results
    - :limit (integer()): Limit to n results
    - :environment (String.t): filter only objects belonging to this environment
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.ResourceList.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_resources(Tesla.Env.client, keyword()) :: {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:ok, PermitIoAPI.Model.ResourceList.t} | {:error, Tesla.Env.t}
  def list_resources(connection, opts \\ []) do
    optional_params = %{
      :"include_built_ins" => :query,
      :"skip" => :query,
      :"limit" => :query,
      :"environment" => :query,
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/resources")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.ResourceList{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Put Resource
  Replaces a single resource. If the resource does not already exist, creates the resource.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - resource_name (String.t): 
  - new_resource (NewResource): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Resource.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec put_resource(Tesla.Env.client, String.t, PermitIoAPI.Model.NewResource.t, keyword()) :: {:ok, PermitIoAPI.Model.Resource.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def put_resource(connection, resource_name, new_resource, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:put)
    |> url("/v1/resources/#{resource_name}")
    |> add_param(:body, :body, new_resource)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.Resource{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Sync Resources
  Syncs all the enforcement points in one request (Syncs all resources and actions)

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - resource_definitions (ResourceDefinitions): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.ResourceList.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec sync_resources(Tesla.Env.client, PermitIoAPI.Model.ResourceDefinitions.t, keyword()) :: {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:ok, PermitIoAPI.Model.ResourceList.t} | {:error, Tesla.Env.t}
  def sync_resources(connection, resource_definitions, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:put)
    |> url("/v1/resources")
    |> add_param(:body, :body, resource_definitions)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.ResourceList{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Update Resource
  Update the resource data.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - resource_id (String.t): 
  - update_resource (UpdateResource): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.Resource.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_resource(Tesla.Env.client, String.t, PermitIoAPI.Model.UpdateResource.t, keyword()) :: {:ok, PermitIoAPI.Model.Resource.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def update_resource(connection, resource_id, update_resource, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:patch)
    |> url("/v1/resources/#{resource_id}")
    |> add_param(:body, :body, update_resource)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.Resource{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end
end
