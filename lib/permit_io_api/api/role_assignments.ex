# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PermitIoAPI.Api.RoleAssignments do
  @moduledoc """
  API calls for all endpoints tagged `RoleAssignments`.
  """

  alias PermitIoAPI.Connection
  import PermitIoAPI.RequestBuilder


  @doc """
  Assign Role
  assign a role to a user in a given scope (read: tenant). All role assignments are scoped by a tenant id or by a resource id (i.e: resource roles).

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - change_role_assignment (ChangeRoleAssignment): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.RoleAssignment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec assign_role(Tesla.Env.client, PermitIoAPI.Model.ChangeRoleAssignment.t, keyword()) :: {:ok, PermitIoAPI.Model.RoleAssignment.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def assign_role(connection, change_role_assignment, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:post)
    |> url("/v1/role_assignments")
    |> add_param(:body, :body, change_role_assignment)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.RoleAssignment{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Get Role Assignment
  Retrieve a single role assignment by its id.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - role_assignment_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.RoleAssignment.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_role_assignment(Tesla.Env.client, String.t, keyword()) :: {:ok, PermitIoAPI.Model.RoleAssignment.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def get_role_assignment(connection, role_assignment_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/role_assignments/#{role_assignment_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.RoleAssignment{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  List Role Assignments
  Get the list of role assignments, optionally filtered by: - role: the role that was granted. - user: the user (i.e: actor) that was granted the role. - tenant: the tenant in which the role was granted in.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :skip (integer()): Skip first n results
    - :limit (integer()): Limit to n results
    - :role (String.t): 
    - :user (String.t): 
    - :tenant (String.t): the tenant unique id (uuid)
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, PermitIoAPI.Model.RoleAssignmentList.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_role_assignments(Tesla.Env.client, keyword()) :: {:ok, PermitIoAPI.Model.RoleAssignmentList.t} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def list_role_assignments(connection, opts \\ []) do
    optional_params = %{
      :"skip" => :query,
      :"limit" => :query,
      :"role" => :query,
      :"user" => :query,
      :"tenant" => :query,
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:get)
    |> url("/v1/role_assignments")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PermitIoAPI.Model.RoleAssignmentList{}},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Remove Role Assignment
  Remove a single role assignment by its id.

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - role_assignment_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec remove_role_assignment(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def remove_role_assignment(connection, role_assignment_id, opts \\ []) do
    optional_params = %{
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/v1/role_assignments/#{role_assignment_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Unassign Role
  Unassign a role from a user in a given scope (read: tenant).

  ## Parameters

  - connection (PermitIoAPI.Connection): Connection to server
  - role (String.t): 
  - user (String.t): 
  - scope (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :environment (String.t): filter only objects belonging to this environment
    - :x_organization_id (String.t): The id of the active organization you want to query on
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec unassign_role(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, PermitIoAPI.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def unassign_role(connection, role, user, scope, opts \\ []) do
    optional_params = %{
      :"environment" => :query,
      :"x-organization-id" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/v1/role_assignments")
    |> add_param(:query, :"role", role)
    |> add_param(:query, :"user", user)
    |> add_param(:query, :"scope", scope)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 422, %PermitIoAPI.Model.HttpValidationError{}}
    ])
  end
end
