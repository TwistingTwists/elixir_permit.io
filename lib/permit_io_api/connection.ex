# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PermitIoAPI.Connection do
  @moduledoc """
  Handle Tesla connections for PermitIoAPI.
  """

  use Tesla

  # Add any middleware here (authentication)
  plug(Tesla.Middleware.BaseUrl, "http://localhost")
  # "http://permitio-pdp.fly.dev:7766"
  plug(Tesla.Middleware.Headers, [{"user-agent", "Elixir"}])
  plug(Tesla.Middleware.EncodeJson, engine: Poison)

  @scopes []

  @doc """
  Configure a client connection using a provided OAuth2 token as a Bearer token

  ## Parameters

  - token (String): Bearer token

  ## Returns

  Tesla.Env.client
  """
  @spec new(String.t()) :: Tesla.Env.client()
  def new(token, middlewares \\ [])

  def new(token, middlewares) when is_binary(token) do
    Tesla.client(
      middlewares ++
        [
          {Tesla.Middleware.Headers, [{"authorization", "Bearer #{token}"}]}
        ]
    )
  end

  # @doc """
  # Configure a client connection using a function which yields a Bearer token.

  # ## Parameters

  # - token_fetcher (function arity of 1): Callback which provides an OAuth2 token
  #   given a list of scopes

  # ## Returns

  # Tesla.Env.client
  # """
  @spec new((list(String.t()) -> String.t()), list(tuple())) :: Tesla.Env.client()
  def new(token_fetcher, middlewares) when is_function(token_fetcher) do
    token_fetcher.(@scopes)
    |> new(middlewares)
  end

  # @doc """
  # Configure an authless client connection

  # # Returns

  # Tesla.Env.client
  # """

  # @spec new(list(tuple())) :: Tesla.Env.client()

  def new(token, middlewares) when is_list(middlewares) do
    Tesla.client(middlewares)
  end
end
