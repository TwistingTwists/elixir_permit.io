# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PermitIoAPI.Model.ResourceList do
  @moduledoc """
  Abstract base class for generic types.  A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as::    class Mapping(Generic[KT, VT]):       def __getitem__(self, key: KT) -> VT:           ...       # Etc.  This class can then be used as follows::    def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:       try:           return mapping[key]       except KeyError:           return default
  """

  @derive [Poison.Encoder]
  defstruct [
    :"url",
    :"data"
  ]

  @type t :: %__MODULE__{
    :"url" => String.t,
    :"data" => [PermitIoAPI.Model.Resource.t]
  }
end

defimpl Poison.Decoder, for: PermitIoAPI.Model.ResourceList do
  import PermitIoAPI.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"data", :list, PermitIoAPI.Model.Resource, options)
  end
end

